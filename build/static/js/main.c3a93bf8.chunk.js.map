{"version":3,"sources":["assets/rainbow.svg","assets/aquarelle.svg","assets/logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Button","react_default","a","createElement","href","this","props","src","icon","alt","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","prompts","draw","currentPrompt","randomize","bind","assertThisInitialized","setState","whichOne","Math","floor","random","length","objectSpread","promptsJSON","className","rainbow","onClick","App_Button","aquarelle","logo","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,uDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,+ryBCOlCC,0LAEE,OACIC,EAAAC,EAAAC,cAAA,KAAGC,KAAMC,KAAKC,MAAMF,MAChBH,EAAAC,EAAAC,cAAA,OAAKI,IAAKF,KAAKC,MAAME,KAAMC,IAAKJ,KAAKC,MAAMF,eAJtCM,cAwDNC,cA7CX,SAAAA,EAAYL,GAAO,IAAAM,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAR,KAAAM,IACfC,EAAAC,OAAAE,EAAA,EAAAF,CAAAR,KAAAQ,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAZ,KAAMC,KACDY,MAAQ,CACTC,QAAS,CAAC,CACNC,KAAO,gCAEXC,cAAe,WAEnBT,EAAKU,UAAYV,EAAKU,UAAUC,KAAfV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KARFA,2EAYfP,KAAKoB,SAAS,SAACP,GACX,IAAIQ,EAAWC,KAAKC,MAAMD,KAAKE,UAAYX,EAAMC,QAAQW,OAAS,IAClE,OAAOjB,OAAAkB,EAAA,EAAAlB,CAAA,GACAK,EADP,CAEIG,cAAeH,EAAMC,QAAQO,GAAUN,oDAKhCF,GACfb,KAAKoB,SAALZ,OAAAkB,EAAA,EAAAlB,CAAA,GACOK,EADP,CAEIC,QAASa,KAEb3B,KAAKiB,6CAIL,OACIrB,EAAAC,EAAAC,cAAA,OAAK8B,UAAU,OACXhC,EAAAC,EAAAC,cAAA,UAAQ8B,UAAU,cACdhC,EAAAC,EAAAC,cAAA,OAAKI,IAAK2B,IAASD,UAAU,WAAWxB,IAAI,SAC5CR,EAAAC,EAAAC,cAAA,MAAIgC,QAAS9B,KAAKiB,WAAlB,WAAsCjB,KAAKa,MAAMG,eACjDpB,EAAAC,EAAAC,cAAA,WAAS8B,UAAU,SACfhC,EAAAC,EAAAC,cAACiC,EAAD,CAAQ5B,KAAM6B,IAAWjC,KAAK,wBAC9BH,EAAAC,EAAAC,cAACiC,EAAD,CAAQ5B,KAAM8B,IAAMlC,KAAK,gCAtC/BM,aCPE6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c3a93bf8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rainbow.d928a209.svg\";","module.exports = __webpack_public_path__ + \"static/media/aquarelle.48ad6da2.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.4f029abf.svg\";","import React, { Component } from 'react'\nimport rainbow from './assets/rainbow.svg'\nimport aquarelle from './assets/aquarelle.svg'\nimport logo from './assets/logo.svg'\nimport promptsJSON from './prompts.json'\nimport './App.css'\n\nclass Button extends Component {\n    render() {\n        return (\n            <a href={this.props.href}>\n                <img src={this.props.icon} alt={this.props.href} />\n            </a>\n        );\n    }\n}\n\nclass App extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            prompts: [{\n                \"draw\":\"3 unlikely objects together\"\n            }],\n            currentPrompt: 'Draw...'\n        }\n        this.randomize = this.randomize.bind(this)\n    }\n\n    randomize() {\n        this.setState((state) => {\n            let whichOne = Math.floor(Math.random() * (state.prompts.length - 1))\n            return {\n                ...state,\n                currentPrompt: state.prompts[whichOne].draw\n            }\n        })\n    }\n\n    componentWillMount(state) {\n        this.setState({\n            ...state,\n            prompts: promptsJSON\n        })\n        this.randomize()\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <img src={rainbow} className=\"App-logo\" alt=\"logo\"/>\n                    <h1 onClick={this.randomize}>Draw... {this.state.currentPrompt}</h1>\n                    <section className=\"links\">\n                        <Button icon={aquarelle} href=\"http://aquarelle.us\" />\n                        <Button icon={logo} href=\"http://voidit.net\" />\n                    </section>\n                </header>\n            </div>\n        )\n    }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}